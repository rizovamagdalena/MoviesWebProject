@model MoviesWEB.Models.ShowScreening

@{
    ViewData["Title"] = "Screening Details";
   

}
<style>
    <style >
    .screen {
        background-color: #ccc;
        padding: 10px;
        border-radius: 5px;
        font-weight: bold;
        letter-spacing: 2px;
        box-shadow: 0 0 5px #999;
    }

    #seatGrid span {
        min-width: 35px;
        text-align: center;
    }
</style>

</style>


<div class="container mt-5">
    <div class="card bg-dark text-light p-4 shadow-lg border-0 rounded-4">
        <div class="row g-4">
            <div class="col-md-4">
                <img src="@Model.Movie.Poster_Path" alt="@Model.Movie.Name"
                     class="img-fluid rounded-4 shadow" />
            </div>

            <div class="col-md-8 d-flex flex-column justify-content-between">
                <div>
                    <h2 class="fw-bold">@Model.Movie.Name</h2>
                    <p class="mb-2">
                        <strong>📅 Screening Date & Time:</strong>
                        @Model.Screening_Date_Time.ToString("MMMM dd, yyyy - hh:mm tt")
                    </p>
                    <p class="mb-2">
                        <strong>🎟 Total Tickets:</strong> @Model.Total_Tickets
                    </p>
                    <p class="mb-3">
                        <strong>✅ Available Tickets:</strong> @Model.Available_Tickets
                    </p>
                    <p class="mb-3">
                        <strong>✅ Price for a Ticket: $</strong> @Model.ticketPrice.ToString("F2")
                    </p>

                    <h5 class="mt-4">Select Seats:</h5>
                    <<div id="seatGridContainer" class="mt-3">
                        <div class="screen text-center mb-2">🎬</div>
                        <div id="seatGrid" class="d-flex flex-column gap-2"></div>
                    </div>
                </div>

                <div class="mt-4">
                    <form asp-action="Delete" asp-controller="Screenings" asp-route-id="@Model.Id"
                          method="post" class="d-inline">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-danger btn-sm rounded-pill"
                                onclick="return confirm('Are you sure you want to delete this screening?');">
                            🗑 Delete
                        </button>
                    </form>

                    <form id="antiForgeryForm">
                        @Html.AntiForgeryToken()
                    </form>

                    <button id="bookSeatsBtn" class="btn btn-success mt-3 rounded-pill px-4">
                        🛒 Add to Cart
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    
    const seats = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.HallSeats));
     console.log(' Seat id:', (seats));
    const seatGrid = document.getElementById('seatGrid');
    const selectedSeats = new Set();

    const seatsByRow = seats.reduce((acc, seat) => {
        if (!acc[seat.RowNumber]) acc[seat.RowNumber] = [];
        acc[seat.RowNumber].push(seat);
        return acc;
    }, {});

    Object.keys(seatsByRow).sort((a, b) => a - b).forEach(rowNumber => {
        const rowDiv = document.createElement('div');
        rowDiv.classList.add('d-flex', 'gap-2'); 

        seatsByRow[rowNumber].forEach(seat => {
            const span = document.createElement('span');
            span.classList.add('badge', 'p-3', 'text-white');
            span.setAttribute('data-bs-toggle', 'tooltip');
            span.setAttribute('title', `Row ${seat.RowNumber}, Seat ${seat.SeatNumber}`);
            span.dataset.seatId = seat.Id;

            if (!seat.IsAvailable) {
                span.classList.add('bg-danger');
                span.style.cursor = 'not-allowed';
            } else {
                span.classList.add('bg-success');
                span.style.cursor = 'pointer';
                span.addEventListener('click', () => {
                    if (span.classList.contains('bg-warning')) {
                        span.classList.remove('bg-warning');
                        span.classList.add('bg-success');
                        selectedSeats.delete(seat.Id);
                    } else {
                        span.classList.remove('bg-success');
                        span.classList.add('bg-warning');
                        selectedSeats.add(seat.Id);
                    }
                });
            }

            span.textContent = seat.SeatNumber;
            rowDiv.appendChild(span);
        });

        seatGrid.appendChild(rowDiv);
    });


   

     const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        tooltipTriggerList.map(function (el) {
            return new bootstrap.Tooltip(el)
     });

    document.getElementById('bookSeatsBtn').addEventListener('click', () => {
         console.log('Selected seats:', Array.from(selectedSeats));

        if (selectedSeats.size === 0) {
            alert('Please select at least one seat.');
            return;
        }
        console.log('Selected seats:', Array.from(selectedSeats));

        fetch('/Screenings/AddToCart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({
                ScreeningId: @Model.Id,
                Quantity: selectedSeats.size,  
                SeatIds: Array.from(selectedSeats),
                SeatNumbers :Array.from(selectedSeats).map(id => {
                    const seat = seats.find(s => s.Id === id);
                    return `R${seat.RowNumber}-S${seat.SeatNumber}`;
                })
            })
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
            alert('Tickets added to your cart!');
                window.location.reload();
            } else {
                alert('Error: ' + data.message);
            }
        })
        .catch(err => console.error(err));
    });
</script>
